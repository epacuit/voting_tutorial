{"version":3,"sources":["DisplayProfile.tsx","index.tsx"],"names":["Profile","styled","_templateObject","_taggedTemplateLiteral","MarginMatrix","_templateObject2","Table","_templateObject3","Th","_templateObject4","Tr","_templateObject5","Td","_templateObject6","TdMargin","_templateObject7","DisplayProfile","_StreamlitComponentBa","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","length","args","Array","_key","call","apply","concat","state","numClicks","selectedCand","selectedCandMargin","renderMarginRow","mrow","ridx","data","map","m","midx","push","_jsx","onMouseOver","onHoverProf","onHoverMatrixMargin","onMouseOut","children","render","prof","props","rank_sizes","cand_names","c1","c2","margin_matrix","num_cands","candidates","range","console","log","_jsxs","r","vidx","c","cidx","className","row","setState","prevState","onClicked","Streamlit","setComponentValue","_createClass","StreamlitComponentBase","withStreamlitConnection","ReactDOM","React","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.34e17d81.chunk.js","sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection\n} from \"streamlit-component-lib\";\nimport React, { ReactNode } from \"react\"\nimport {range} from 'underscore';\nimport styled from \"@emotion/styled\";\n\nconst Profile = styled(\"span\")`\n  margin-right:80px;\n  float:left;\n  width: 300px;\n  overflow-x: auto;\n\n  `\nconst MarginMatrix = styled(\"span\")`\n  margin-left:0px;\n`\n\nconst Table = styled(\"table\")`\n  padding: 0;\n  border-collapse: collapse;\n  text-align: center;\n  margin-bottom:20px;\n  font-size:120%;\n`;\n\nconst Th = styled(\"th\")`\n  font-weight:400;\n  border: none !important;\n  border-bottom: 2px solid #656565 !important;\n  padding: 6px 13px;\n`;\nconst Tr = styled(\"tr\")`\n  border: none !important;\n  background: white !important;\n`;\n\nconst Td = styled(\"td\")`\n  text-align: center;\n  border: none;\n  margin: 0;\n  padding: 6px 13px;\n`;\n\nconst TdMargin = styled(\"td\")`\n  text-align: center;\n  border: 1px solid;\n  margin: 0;\n  padding: 6px 13px;\n`;\n\n\ninterface State {\n  numClicks: number,\n  selectedCand: number,\n  selectedCandMargin: number\n}\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nclass DisplayProfile extends StreamlitComponentBase<State> {\n  public state = { numClicks: 0, selectedCand: -1, selectedCandMargin:-1}\n\n  private renderMarginRow = (mrow: Int32Array, ridx:number) => {\n    let data:any = [];\n    mrow.map((m: number, midx: number) => data.push(\n    <TdMargin \n    onMouseOver={() => {this.onHoverProf(ridx); this.onHoverMatrixMargin(midx)}}\n    onMouseOut={() => {this.onHoverProf(-1); this.onHoverMatrixMargin(-1)}}\n    key={midx}>{m}</TdMargin>))\n    return data;\n  }\n\n  public render = (): ReactNode => {\n    // Arguments that are passed to the plugin in Python are accessible\n    // via `this.props.args`. Here, we access the \"name\" arg.\n    const prof = this.props.args[\"prof\"];\n    const rank_sizes = this.props.args[\"rank_sizes\"];\n    const cand_names = this.props.args[\"cand_names\"];\n    const c1 = this.props.args[\"c1\"];\n    const c2 = this.props.args[\"c2\"];\n    const margin_matrix = this.props.args[\"margin_matrix\"];    \n    const num_cands = this.props.args[\"num_cands\"];\n    const candidates = range(0, num_cands,1);\n    console.log(\"HERE!!\")\n    console.log(candidates)\n    console.log(cand_names)\n\n    const css = `\n    .highlight-blue {\n        background-color: blue;\n        color: white;\n        cursor: pointer;\n    }\n    .highlight-red {\n      background-color: red;\n      color: white;\n      cursor: pointer;\n   }\n   .highlight-gray {\n    background-color: gray;\n    color: white;\n    cursor: pointer;\n }\n`\n    return (\n      <span>\n      <style>\n        {css}\n      </style>\n      <Profile>\n        <Table>\n          <thead>\n            <Tr>\n              {prof.map((r: Int32Array, vidx: any) => \n                <Th>{rank_sizes[vidx]}</Th>\n              )}\n            </Tr>\n            </thead>\n            <tbody>\n            {candidates.map((c,cidx) => {\n              return( \n              <Tr key={cidx}> \n                {prof.map((r: Int32Array,vidx:number) => {\n                  return(\n                  <Td key={vidx} className = {c1 == r[cidx] ? \"highlight-blue\": (c2 == r[cidx]  ? \"highlight-red\": (this.state.selectedCand == r[cidx] ? \"highlight-gray\": \"\"))} \n                  onMouseOver={() => this.onHoverProf(r[cidx])}\n                  onMouseOut={() => this.onHoverProf(-1)}>\n                    {cand_names[r[cidx]]}\n                    </Td>\n                  )\n                })}\n              </Tr>)\n            })}\n          </tbody>\n        </Table>\n      </Profile>\n      {margin_matrix != null ? <MarginMatrix>\n        <Table>\n         <tbody>\n         <Tr>\n            <Td></Td>\n            {margin_matrix.map((row: Int32Array, ridx: number) => {\n              return(<Td>{cand_names[ridx]}</Td>);\n            })}\n         </Tr> \n         {margin_matrix.map((mrow: Int32Array,ridx: number) => {\n           console.log(mrow)\n            return(<Tr key={ridx}>\n              <Td>{cand_names[ridx]}</Td>\n              {this.renderMarginRow(mrow, ridx)}\n            </Tr>)\n         })}\n         </tbody>\n        </Table>\n      </MarginMatrix>: \"\"}\n      </span>\n    )\n  }\n  private onHoverProf = (c: number): void => {\n    this.setState(\n      prevState => ({selectedCand: c  })\n    )\n  }\n  private onHoverMatrixMargin = (c: number): void => {\n    this.setState(\n      prevState => ({selectedCandMargin: c  })\n    )\n  }\n  /** Click handler for our \"Click Me!\" button. */\n  private onClicked = (): void => {\n    // Increment state.numClicks, and pass the new value back to\n    // Streamlit via `Streamlit.setComponentValue`.\n    this.setState(\n      prevState => ({ numClicks: prevState.numClicks + 1 }),\n      () => Streamlit.setComponentValue(this.state.numClicks)\n    )\n  }\n}\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(DisplayProfile)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport DisplayProfile from \"./DisplayProfile\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <DisplayProfile />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}